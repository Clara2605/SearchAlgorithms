@startuml
skinparam linetype ortho
left to right direction
'top to bottom direction

class Graph {
    -adjacencyList: Map<Node, Set<Node>>
    +addEdge(Node, Node): void
    +getNeighbors(Node): Set<Node>
    +printGraph(): void
}

class Node {
    -id: int
    +Node(int): void
    +getId(): int
    +equals(Object): boolean
    +hashCode(): int
    +toString(): String
}

class GraphReader {
    +readGraph(String): List<List<Integer>>
}

class BFSGraphParallel {
    -graph: Graph
    -startNode: Node
    -queue: ConcurrentLinkedQueue<Node>
    -visited: ConcurrentHashMap<Node, Boolean>
    +BFSGraphParallel(Graph, Node): void
    +call(): Set<Node>
}

class DFSGraphParallel {
    -graph: Graph
    -startNode: Node
    -stack: ConcurrentLinkedDeque<Node>
    -visited: ConcurrentHashMap<Node, Boolean>
    +DFSGraphParallel(Graph, Node): void
    +call(): Set<Node>
}

class BFSTreeParallel {
    -root: TreeNode
    +BFSTreeParallel(TreeNode): void
    +call(): Set<TreeNode>
}

class DFSTreeParallel {
    -root: TreeNode
    +DFSTreeParallel(TreeNode): void
    +call(): Set<TreeNode>
}

class GraphAlgorithmExecutor {
    +runParallelMethods(String, int): void
    +runParallelBFS(ExecutorService, Graph, Node): Future<Set<Node>>
    +runParallelDFS(ExecutorService, Graph, Node): Future<Set<Node>>
    -monitorParallelMemoryUsage(Callable<Set<Node>>, ExecutorService): double
}

class TreeAlgorithmExecutor {
    +runParallelMethods(String, int): void
    -monitorParallelMemoryUsage(Callable<Set<TreeNode>>): double
    +runParallelBFSTree(ExecutorService, TreeNode): Future<Set<TreeNode>>
    +runParallelDFSTree(ExecutorService, TreeNode): Future<Set<TreeNode>>
}

class ExcelDataRecorder {
    +writeData(String, List<Double>, List<Double>, int, boolean, boolean): void
    +writeHeader(Sheet, boolean): void
    +writeDataInColumns(List<Double>, List<Double>, int, Row): void
    +getNextEmptyRow(Sheet, int): int
}

class TreeNode {
    -value: int
    -children: ArrayList<TreeNode>
    +TreeNode(int): void
    +addChild(TreeNode): void
    +getValue(): int
    +getChildren(): ArrayList<TreeNode>
}

class Main {
    +main(String[]): void
}

Graph --> Node : contains
GraphReader ..> Graph : reads and converts to
BFSGraphParallel --> Graph
BFSGraphParallel --> Node
DFSGraphParallel --> Graph
DFSGraphParallel --> Node
BFSTreeParallel --> TreeNode
DFSTreeParallel --> TreeNode
GraphAlgorithmExecutor --> BFSGraphParallel : uses
GraphAlgorithmExecutor --> DFSGraphParallel : uses
GraphAlgorithmExecutor ..> ExcelDataRecorder : logs data
TreeAlgorithmExecutor --> BFSTreeParallel : uses
TreeAlgorithmExecutor --> DFSTreeParallel : uses
TreeAlgorithmExecutor ..> ExcelDataRecorder : logs data
Main ..> GraphAlgorithmExecutor : executes
Main ..> TreeAlgorithmExecutor : executes

@enduml
