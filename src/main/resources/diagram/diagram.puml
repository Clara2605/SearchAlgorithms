@startuml
skinparam linetype ortho
left to right direction

class Graph {
    -adjacencyList: Map<Node, Set<Node>>
    +addEdge(Node, Node): void
    +getNeighbors(Node): Set<Node>
    +printGraph(): void
}

class Node {
    -id: int
    +Node(int): void
    +getId(): int
    +equals(Object): boolean
    +hashCode(): int
    +toString(): String
}

class GraphGenerator {
    +generateGraph(int): Graph
}

class GraphReader {
    +readGraph(String): List<List<Integer>>
}

class MyLogger {
    -LOGGER: Logger
    +log(Level, String): void
}

class BFSParallel {
    -graph: Graph
    -startNode: Node
    -queue: ConcurrentLinkedQueue<Node>
    -visited: ConcurrentHashMap<Node, Boolean>
    +BFSParallel(Graph, Node): void
    +call(): Set<Node>
}

class DFSParallel {
    -graph: Graph
    -startNode: Node
    -stack: ConcurrentLinkedDeque<Node>
    -visited: ConcurrentHashMap<Node, Boolean>
    +DFSParallel(Graph, Node): void
    +call(): Set<Node>
}

class BFSSequential {
    +graphBFS(ArrayList<ArrayList<Integer>>, int): void
    +treeBFS(TreeNode): void
}

class DFSSequential {
    +graphDFS(ArrayList<ArrayList<Integer>>, int): void
    +treeDFS(TreeNode): void
}

class TreeGenerator {
    +generateTree(int, String): void
}

class TreeNode {
    -value: int
    -children: ArrayList<TreeNode>
    +TreeNode(int): void
    +addChild(TreeNode): void
    +getValue(): int
    +getChildren(): ArrayList<TreeNode>
}

class ExcelDataRecorder {
    +writeHeader(Sheet, boolean): void
    +writeDataInColumns(List<Double>, List<Double>, int, Row): void
    +getNextEmptyRow(Sheet, int): int
}

class GraphAlgorithmExecutor {
    +runSequentialBFS(String, int, List<Double>, List<Double>): void
    +runSequentialDFS(String, int, List<Double>, List<Double>): void
    +runSequentialMethods(String, int, int): void
    +runParallelMethods(String, int): void
}

class TreeAlgorithmExecutor {
    +runTreeBFS(String, List<Double>, List<Long>): void
    +runTreeDFS(String, List<Double>, List<Long>): void
    +runTreeMethods(String, Scanner, int): void
    +readTreeFromFile(String): TreeNode
}

class Main {
    +main(String[]): void
}

Graph --> Node : contains
GraphGenerator ..> Graph : generates
GraphReader ..> Graph : reads and converts to
BFSSequential ..> GraphAlgorithmExecutor : used by
DFSSequential ..> GraphAlgorithmExecutor : used by
BFSParallel ..> GraphAlgorithmExecutor : used by
DFSParallel ..> GraphAlgorithmExecutor : used by
ExcelDataRecorder ..> GraphAlgorithmExecutor : logs data
MyLogger ..> Graph : logs actions
MyLogger ..> Node : logs actions
MyLogger ..> ExcelDataRecorder : logs errors
BFSParallel --> Graph
BFSParallel --> Node
DFSParallel --> Graph
DFSParallel --> Node
BFSSequential ..> TreeAlgorithmExecutor : used by
DFSSequential ..> TreeAlgorithmExecutor : used by
ExcelDataRecorder ..> TreeAlgorithmExecutor : logs data
TreeNode ..> TreeAlgorithmExecutor : used by
Main ..> GraphAlgorithmExecutor : executes
Main ..> TreeAlgorithmExecutor : executes
@enduml
